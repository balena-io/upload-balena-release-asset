import type { BalenaRequestOptions, BalenaRequestResponse } from './request';
import type { getRequestAsync } from './utils';
import type * as Stream from 'stream';
export interface BalenaRequestPassThroughStream extends Stream.PassThrough {
    response: BalenaRequestResponse;
    mime?: string | null;
}
/**
 * This callback is displayed as a global member.
 * @callback estimateStreamCallback
 * @param {BalenaRequestOptions} options
 *
 * @returns {Promise<NodeJS.ReadableStream>} request stream
 */
/**
 * @summary Make a node request with progress
 * @function
 * @protected
 *
 * @returns {estimateStreamCallback} request stream callback
 *
 * @example
 * progress.estimate(options).then (stream) ->
 * 		stream.pipe(fs.createWriteStream('foo/bar'))
 * 		stream.on 'progress', (state) ->
 * 			console.log(state)
 */
export declare function estimate(requestAsync?: ReturnType<typeof getRequestAsync>, isBrowser?: boolean): (options: BalenaRequestOptions) => Promise<BalenaRequestPassThroughStream>;
