"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.get = exports.set = void 0;
var validVersions;
(function (validVersions) {
    validVersions[validVersions["es3"] = 0] = "es3";
    validVersions[validVersions["es5"] = 1] = "es5";
    validVersions[validVersions["es2015"] = 2] = "es2015";
    validVersions[validVersions["es2016"] = 3] = "es2016";
    validVersions[validVersions["es2017"] = 4] = "es2017";
    validVersions[validVersions["es2018"] = 5] = "es2018";
    validVersions[validVersions["es2019"] = 6] = "es2019";
    validVersions[validVersions["es2020"] = 7] = "es2020";
    validVersions[validVersions["es2021"] = 8] = "es2021";
    validVersions[validVersions["es2022"] = 9] = "es2022";
    validVersions[validVersions["es2023"] = 10] = "es2023";
    validVersions[validVersions["esnext"] = 11] = "esnext";
})(validVersions || (validVersions = {}));
var desiredVersionIndex = 0;
var set = function (version) {
    var versionIndex = validVersions[version];
    if (versionIndex == null) {
        throw new Error('Invalid es version to set: ' + version);
    }
    desiredVersionIndex = versionIndex;
};
exports.set = set;
var get = function (supportedVersions) {
    if (supportedVersions == null) {
        return validVersions[desiredVersionIndex];
    }
    if (supportedVersions.length === 0) {
        throw new Error('Empty array of supported versions passed to @balena/es-version get');
    }
    var closestVersionUnder;
    var closestVersionOver;
    for (var _i = 0, supportedVersions_1 = supportedVersions; _i < supportedVersions_1.length; _i++) {
        var supportedVersion = supportedVersions_1[_i];
        var supportedVersionIndex = validVersions[supportedVersion];
        if (supportedVersionIndex == null) {
            throw new Error('Invalid version for @balena/es-version get: ' + supportedVersion);
        }
        if (supportedVersionIndex <= desiredVersionIndex) {
            if (closestVersionUnder == null ||
                supportedVersionIndex > closestVersionUnder) {
                closestVersionUnder = supportedVersionIndex;
            }
        }
        else {
            if (closestVersionOver == null ||
                supportedVersionIndex < closestVersionOver) {
                closestVersionOver = supportedVersionIndex;
            }
        }
    }
    if (closestVersionUnder != null) {
        return validVersions[closestVersionUnder];
    }
    if (closestVersionOver != null) {
        return validVersions[closestVersionOver];
    }
    throw new Error('No supported versions for @balena/es-version: ' + supportedVersions.join());
};
exports.get = get;
//# sourceMappingURL=index.js.map