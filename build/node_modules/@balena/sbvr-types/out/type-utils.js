"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.nativeFactTypeTemplates = void 0;
const checkRequired = (validateFn) => {
    async function runCheck(value, required) {
        if (value == null) {
            if (required) {
                throw new Error('cannot be null');
            }
            return null;
        }
        return validateFn(value);
    }
    return runCheck;
};
const equality = {
    'is equal to': (from, to) => ['Equals', from, to],
};
exports.nativeFactTypeTemplates = {
    equality,
    comparison: {
        'is less than': (from, to) => ['LessThan', from, to],
        'is less than or equal to': (from, to) => [
            'LessThanOrEqual',
            from,
            to,
        ],
        ...equality,
    },
};
exports.validate = {
    checkRequired,
    integer: checkRequired((value) => {
        const processedValue = parseInt(value, 10);
        if (Number.isNaN(processedValue)) {
            throw new Error('is not a number: ' + value);
        }
        return processedValue;
    }),
    bigint: checkRequired((value) => {
        if (value === '') {
            throw new Error('Cannot convert empty string to a BigInt');
        }
        return BigInt(value);
    }),
    text: (length) => checkRequired((value) => {
        if (typeof value !== 'string') {
            throw new Error('is not a string: ' + value);
        }
        if (length != null && value.length > length) {
            throw new Error('longer than ' + length + ' characters (' + value.length + ')');
        }
        return value;
    }),
    date: checkRequired((value) => {
        let processedValue = Number(value);
        if (Number.isNaN(processedValue)) {
            processedValue = value;
        }
        const processedDate = new Date(processedValue);
        if (Number.isNaN(processedDate.getTime())) {
            throw new Error('is not a valid date: ' + value);
        }
        return processedDate;
    }),
};
//# sourceMappingURL=type-utils.js.map