"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.fetchProcessing = exports.nativeProperties = exports.types = void 0;
const TypeUtils = require("../type-utils");
exports.types = {
    postgres: 'JSONB',
    mysql: 'JSON',
    websql: 'TEXT',
    odata: {
        name: 'Self.WebResource',
        complexType: `\
<ComplexType Name="WebResource">
	<Property Name="filename" Nullable="false" Type="Edm.String"/>\
	<Property Name="href" Nullable="false" Type="Edm.String"/>\
	<Property Name="content_type" Nullable="true" Type="Edm.String"/>\
	<Property Name="content_disposition" Nullable="true" Type="Edm.String"/>\
	<Property Name="size" Nullable="true" Type="Edm.Int64"/>\
	<Property Name="checksum" Nullable="true" Type="Edm.String"/>\
</ComplexType>`,
    },
};
exports.nativeProperties = {
    has: {
        Filename: (referencedField) => [
            'ExtractJSONPathAsText',
            referencedField,
            ['TextArray', ['EmbeddedText', 'filename']],
        ],
        HRef: (referencedField) => [
            'ExtractJSONPathAsText',
            referencedField,
            ['TextArray', ['EmbeddedText', 'href']],
        ],
        'Content Type': (referencedField) => [
            'ExtractJSONPathAsText',
            referencedField,
            ['TextArray', ['EmbeddedText', 'content_type']],
        ],
        'Content Disposition': (referencedField) => [
            'ExtractJSONPathAsText',
            referencedField,
            ['TextArray', ['EmbeddedText', 'content_disposition']],
        ],
        Checksum: (referencedField) => [
            'ExtractJSONPathAsText',
            referencedField,
            ['TextArray', ['EmbeddedText', 'checksum']],
        ],
        Size: (referencedField) => [
            'Cast',
            [
                'ExtractJSONPathAsText',
                referencedField,
                ['TextArray', ['EmbeddedText', 'size']],
            ],
            'Big Integer',
        ],
    },
};
const fetchProcessing = (data) => {
    let refData;
    if (data === null) {
        return data;
    }
    if (typeof data === 'string') {
        try {
            refData = JSON.parse(data);
        }
        catch {
            throw new Error(`Invalid JSON: ${data}`);
        }
    }
    else if (typeof data === 'object') {
        refData = data;
    }
    else {
        throw new Error(`can't be read from stored value ${typeof data}`);
    }
    return {
        filename: refData.filename,
        href: refData.href,
        content_type: refData.content_type,
        content_disposition: refData.content_disposition,
        size: refData.size,
        checksum: refData.checksum,
    };
};
exports.fetchProcessing = fetchProcessing;
exports.validate = TypeUtils.validate.checkRequired((value) => {
    if (typeof value !== 'object') {
        throw new Error(`is not an object: ${typeof value}`);
    }
    if (value.filename == null) {
        throw new Error('filename is required and must be a string');
    }
    if (typeof value.filename !== 'string') {
        throw new Error('filename must be a string');
    }
    if (value.href == null) {
        throw new Error('href is required and must be a string');
    }
    if (typeof value.href !== 'string') {
        throw new Error('href must be a string');
    }
    if (value.content_type != null && typeof value.content_type !== 'string') {
        throw new Error('content_type must be a string or undefined');
    }
    if (value.content_disposition != null &&
        typeof value.content_disposition !== 'string') {
        throw new Error('content_disposition must be a string or undefined');
    }
    if (value.size != null && !Number.isInteger(value.size)) {
        throw new Error('size must be an integer or undefined');
    }
    if (value.checksum != null && typeof value.checksum !== 'string') {
        throw new Error('checksum must be a string or undefined');
    }
    try {
        return JSON.stringify(value);
    }
    catch {
        throw new Error("can't stringify JSON content");
    }
});
//# sourceMappingURL=web-resource.js.map