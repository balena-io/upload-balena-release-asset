import type { AbstractSqlQuery, AbstractSqlType, InsertQueryNode, SelectQueryNode, UnionQueryNode, UpdateQueryNode, DeleteQueryNode, UpsertQueryNode } from './AbstractSQLCompiler';
import { Engines } from './AbstractSQLCompiler';
export type Binding = [string, any] | ['Bind', number | string | [string, string]];
export interface SqlResult {
    query: string;
    bindings: Binding[];
}
export declare const comparisons: {
    Equals: string;
    GreaterThan: string;
    GreaterThanOrEqual: string;
    LessThan: string;
    LessThanOrEqual: string;
    NotEquals: string;
    Like: string;
};
export declare const isTextValue: (type: unknown) => type is "Text" | "EmbeddedText" | "Concatenate" | "ConcatenateWithSeparator" | "Lower" | "Upper" | "Trim" | "Substring" | "Right" | "Replace" | "ExtractJSONPathAsText" | "EscapeForLike";
export declare const isNumericValue: (type: unknown) => type is "Number" | "Integer" | "Real" | "Add" | "Subtract" | "Multiply" | "Divide" | "StrPos" | "Year" | "Month" | "Day" | "Hour" | "Minute" | "Second" | "Fractionalseconds" | "Totalseconds" | "Round" | "Floor" | "Ceiling" | "Count" | "Average" | "Sum" | "BitwiseAnd" | "BitwiseShiftRight" | "CharacterLength" | "SubtractDateDate";
export declare const isBooleanValue: (type: unknown) => type is "Boolean" | "Equals" | "NotEquals" | "IsDistinctFrom" | "IsNotDistinctFrom" | "GreaterThan" | "GreaterThanOrEqual" | "LessThan" | "LessThanOrEqual" | "Between" | "Like" | "In" | "NotIn" | "Exists" | "NotExists" | "Not" | "And" | "Or" | "StartsWith" | "EndsWith" | "Contains";
export declare const isDateValue: (type: unknown) => type is "Date" | "ToDate" | "ToTime" | "CurrentTimestamp" | "CurrentDate" | "DateTrunc" | "SubtractDateNumber" | "SubtractDateDuration" | "AddDateNumber" | "AddDateDuration";
export declare const isArrayValue: (type: unknown) => type is "TextArray";
export declare const isJSONValue: (type: unknown) => type is "AggregateJSON" | "ToJSON";
export declare const isDurationValue: (type: unknown) => type is "Duration";
export declare const isFieldValue: (type: unknown) => type is "Field" | "ReferencedField";
export declare const isNotNullable: (node: AbstractSqlType) => boolean;
export declare const isAbstractSqlQuery: (x: AbstractSqlType) => x is AbstractSqlQuery;
export declare const getAbstractSqlQuery: (args: AbstractSqlType[], index: number) => AbstractSqlQuery;
declare const mathOps: {
    Add: string;
    Subtract: string;
    Multiply: string;
    Divide: string;
    BitwiseAnd: string;
    BitwiseShiftRight: string;
};
export type MathOps = keyof typeof mathOps;
export declare const checkArgs: (matchName: string, args: any[], num: number) => void;
export declare const checkMinArgs: (matchName: string, args: any[], num: number) => void;
export declare function AbstractSQLRules2SQL(abstractSQL: UpsertQueryNode, $engine: Engines, $noBinds: true): [string, string];
export declare function AbstractSQLRules2SQL(abstractSQL: AbstractSqlQuery, $engine: Engines, $noBinds: true): string;
export declare function AbstractSQLRules2SQL(abstractSQL: UpsertQueryNode, $engine: Engines, $noBinds?: false): [SqlResult, SqlResult];
export declare function AbstractSQLRules2SQL(abstractSQL: SelectQueryNode | UnionQueryNode | InsertQueryNode | UpdateQueryNode | DeleteQueryNode, $engine: Engines, $noBinds?: false): SqlResult;
export declare function AbstractSQLRules2SQL(abstractSQL: AbstractSqlQuery, $engine: Engines, $noBinds?: false): SqlResult | [SqlResult, SqlResult];
export declare function AbstractSQLRules2SQL(abstractSQL: AbstractSqlQuery, $engine: Engines, $noBinds?: boolean): SqlResult | [SqlResult, SqlResult] | string;
export {};
