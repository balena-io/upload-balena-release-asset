import type { AnyTypeNodes, EqualsNode, LessThanNode, LessThanOrEqualNode, ReferencedFieldNode } from '@balena/abstract-sql-compiler';
export type NativeNames = Record<string, AnyTypeNodes>;
export type NativeProperties = Record<string, Record<string, (from: ReferencedFieldNode) => AnyTypeNodes>>;
export type NativeFactTypes = Record<string, Record<string, (from: ReferencedFieldNode, to: ReferencedFieldNode) => AnyTypeNodes>>;
export interface DatabaseTypeFn {
    (necessity: string, index: string): string;
    castType: string;
}
export type DatabaseType = string | DatabaseTypeFn;
export interface SbvrType<Read = unknown, Write = any, DbWrite = unknown> {
    types: {
        odata: {
            name: string;
            complexType?: string;
        };
        postgres: DatabaseType;
        mysql: DatabaseType;
        websql: DatabaseType;
    };
    fetchProcessing?: FetchProcessing<Read>;
    validate: Validate<Write, DbWrite>;
}
export interface TsTypes<Read, Write> {
    Read: Read;
    Write: Write;
}
export type FetchProcessing<Read> = (data: unknown) => Read | null | undefined;
export interface Validate<Write, DbWrite> {
    (value: Write, required: true): Promise<DbWrite>;
    (value: Write, required: false): Promise<DbWrite | null>;
    (value: Write, required: boolean): Promise<DbWrite | null>;
}
export declare const nativeFactTypeTemplates: {
    equality: {
        'is equal to': (from: ReferencedFieldNode, to: ReferencedFieldNode) => EqualsNode;
    };
    comparison: {
        'is equal to': (from: ReferencedFieldNode, to: ReferencedFieldNode) => EqualsNode;
        'is less than': (from: ReferencedFieldNode, to: ReferencedFieldNode) => LessThanNode;
        'is less than or equal to': (from: ReferencedFieldNode, to: ReferencedFieldNode) => LessThanOrEqualNode;
    };
};
export declare const validate: {
    checkRequired: <T>(validateFn: (value: any) => T | Promise<T>) => {
        (value: unknown, required: true): Promise<T>;
        (value: undefined | null, required: false): Promise<null>;
        (value: unknown, required: boolean): Promise<T | null>;
    };
    integer: {
        (value: unknown, required: true): Promise<number>;
        (value: undefined | null, required: false): Promise<null>;
        (value: unknown, required: boolean): Promise<number | null>;
    };
    bigint: {
        (value: unknown, required: true): Promise<bigint>;
        (value: undefined | null, required: false): Promise<null>;
        (value: unknown, required: boolean): Promise<bigint | null>;
    };
    text: (length?: number) => {
        (value: unknown, required: true): Promise<string>;
        (value: undefined | null, required: false): Promise<null>;
        (value: unknown, required: boolean): Promise<string | null>;
    };
    date: {
        (value: unknown, required: true): Promise<Date>;
        (value: undefined | null, required: false): Promise<null>;
        (value: unknown, required: boolean): Promise<Date | null>;
    };
};
